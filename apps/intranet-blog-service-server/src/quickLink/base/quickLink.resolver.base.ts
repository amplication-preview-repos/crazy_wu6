/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuickLink } from "./QuickLink";
import { QuickLinkCountArgs } from "./QuickLinkCountArgs";
import { QuickLinkFindManyArgs } from "./QuickLinkFindManyArgs";
import { QuickLinkFindUniqueArgs } from "./QuickLinkFindUniqueArgs";
import { CreateQuickLinkArgs } from "./CreateQuickLinkArgs";
import { UpdateQuickLinkArgs } from "./UpdateQuickLinkArgs";
import { DeleteQuickLinkArgs } from "./DeleteQuickLinkArgs";
import { QuickLinkService } from "../quickLink.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuickLink)
export class QuickLinkResolverBase {
  constructor(
    protected readonly service: QuickLinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuickLink",
    action: "read",
    possession: "any",
  })
  async _quickLinksMeta(
    @graphql.Args() args: QuickLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuickLink])
  @nestAccessControl.UseRoles({
    resource: "QuickLink",
    action: "read",
    possession: "any",
  })
  async quickLinks(
    @graphql.Args() args: QuickLinkFindManyArgs
  ): Promise<QuickLink[]> {
    return this.service.quickLinks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuickLink, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuickLink",
    action: "read",
    possession: "own",
  })
  async quickLink(
    @graphql.Args() args: QuickLinkFindUniqueArgs
  ): Promise<QuickLink | null> {
    const result = await this.service.quickLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuickLink)
  @nestAccessControl.UseRoles({
    resource: "QuickLink",
    action: "create",
    possession: "any",
  })
  async createQuickLink(
    @graphql.Args() args: CreateQuickLinkArgs
  ): Promise<QuickLink> {
    return await this.service.createQuickLink({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuickLink)
  @nestAccessControl.UseRoles({
    resource: "QuickLink",
    action: "update",
    possession: "any",
  })
  async updateQuickLink(
    @graphql.Args() args: UpdateQuickLinkArgs
  ): Promise<QuickLink | null> {
    try {
      return await this.service.updateQuickLink({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuickLink)
  @nestAccessControl.UseRoles({
    resource: "QuickLink",
    action: "delete",
    possession: "any",
  })
  async deleteQuickLink(
    @graphql.Args() args: DeleteQuickLinkArgs
  ): Promise<QuickLink | null> {
    try {
      return await this.service.deleteQuickLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
